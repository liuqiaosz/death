<?xml version="1.0" encoding="utf-8"?>
<ui:GenericProperty xmlns:fx="http://ns.adobe.com/mxml/2009" 
						 xmlns:s="library://ns.adobe.com/flex/spark" 
						 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:ui="editor.ui.*" gap="10">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import pixel.ui.control.SimpleTabPanel;
			import pixel.ui.control.Tab;
			import pixel.ui.control.TabContent;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var _TabChildren:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var TabContentStyleEnable:Boolean = false;
			[Bindable]
			protected var BindTabContentLayout:int = 0;
			
			private var TabPanel:SimpleTabPanel = null;
			private var CurrentTab:pixel.ui.control.Tab = null;
			private var _CurrentTabContent:TabContent = null;
			
			public function set CurrentTabContent(Value:TabContent):void
			{
				_CurrentTabContent = Value;
			}
			public function get CurrentTabContent():TabContent
			{
				return _CurrentTabContent;
			}
			
			override protected function Initialized():void
			{
				
				if(Control is TabContent)
				{
					Control = TabContent(Control).parent as SimpleTabPanel;
				}
				TabPanel = Control as SimpleTabPanel;
				var Tabs:Array = TabPanel.Tabs;
				var TabChild:Tab = null;
				_TabChildren.removeAll();
				for(var Idx:int=0; Idx<Tabs.length; Idx++)
				{
					TabChild = Tabs[Idx];
					_TabChildren.addItem({
						Index: Idx,
						Label: "标签" + Idx,
						Tab: TabChild
					});
				}
				TabCombobox.selectedIndex = 0;
				CurrentTab = Tabs[0];
				CurrentTabContent = TabPanel.FindContentByTab(CurrentTab);
				BorderStyle.Control = CurrentTabContent;
				BackgroundStyle.Control = CurrentTabContent;
			}
			/**
			 * 添加新标签
			 **/
			protected function AddNewTab(event:MouseEvent):void
			{
				var NewTab:pixel.ui.control.Tab = TabPanel.CreateTab();
				var Idx:int = _TabChildren.length;
				_TabChildren.addItem({
					Index: Idx,
					Label: "标签" + Idx,
					Tab: NewTab
				});
				TabCombobox.selectedIndex = Idx;
				CurrentTab = NewTab;
				CurrentTabContent = TabPanel.FindContentByTab(NewTab);
				BorderStyle.Control = CurrentTabContent;
				BackgroundStyle.Control = CurrentTabContent;
				TabContentReset(CurrentTabContent);
			}
			
			/**
			 * 删除当前选择的标签
			 **/
			protected function DeleteTab(event:MouseEvent):void
			{
				if(_TabChildren.length > 1)
				{
					var SelectedTab:Tab = _TabChildren.getItemAt(TabCombobox.selectedIndex).Tab;
					_TabChildren.removeItemAt(TabCombobox.selectedIndex);
					if(SelectedTab)
					{
						TabPanel.DeleteTab(SelectedTab);
						TabCombobox.selectedIndex = 0;
						CurrentTab = _TabChildren.getItemAt(0).Tab;
						CurrentTabContent = TabPanel.FindContentByTab(CurrentTab);
						TabContentReset(CurrentTabContent);
						BorderStyle.Control = CurrentTabContent;
						BackgroundStyle.Control = CurrentTabContent;
					}
				}
			}
			
			/**
			 * 标签选择
			 **/
			protected function TabChange(event:IndexChangeEvent):void
			{
				if(event.newIndex >= 0)
				{
					var TabChild:pixel.ui.control.Tab = _TabChildren.getItemAt(event.newIndex).Tab;
					if(null != TabChild)
					{
						CurrentTab = TabChild;
						CurrentTabContent = TabPanel.SwitchTab(TabChild);
						TabContentReset(CurrentTabContent);
						BorderStyle.Control = CurrentTabContent;
						BackgroundStyle.Control = CurrentTabContent;
					}
				}
			}
			
			/**
			 * 标签对应的内容面板布局修改
			 **/
			protected function LayoutChange(event:IndexChangeEvent):void
			{
				CurrentTabContent.Layout = ControlLayout.selectedIndex;
			}

			
			private function TabContentReset(TabContentChild:TabContent):void
			{
				//Reset();
				//BorderThinkness.value = TabContentChild.Style.BorderThinkness;
				//BorderColorPicker.selectedColor = TabContentChild.Style.BorderColor;
				//BorderAlpha.value = TabContentChild.Style.BorderAlpha;
				//BackgroundColorPicker.selectedColor = TabContentChild.Style.BackgroundColor;
				//BackgroundAlpha.value = TabContentChild.Style.BackgroundAlpha;
				ControlLayout.selectedIndex = TabContentChild.Layout;
				TabContentStyleEnable = true;
			}
		]]>
	</fx:Script>
	<ui:SimpleProperty id="Simple" Control="{CurrentControl}" />
	
	<s:Label text="标签样式" styleName="LabelTitle"/>
	<mx:HRule width="100%" />
	<s:HGroup verticalAlign="middle">
		<s:Label text="Tab标签" width="60"/>
		<s:ComboBox id="TabCombobox" dataProvider="{_TabChildren}" labelField="Label" width="70" change="TabChange(event)" selectedIndex="0" />
		<s:Image source="@Embed('../assets/Add.png')" width="20" height="20" smooth="true" smoothingQuality="high" buttonMode="true" click="AddNewTab(event)" toolTip="添加新标签"/>
		<s:Image source="@Embed('../assets/Delete.png')" width="20" height="20" smooth="true" smoothingQuality="high" buttonMode="true" click="DeleteTab(event)" toolTip="删除当前选择标签"/>
	</s:HGroup>
	
	<s:Label text="标签内容面板属性" styleName="LabelTitle"/>
	<mx:HRule width="100%" />
	<s:VGroup id="TabContentStyleGroup" >
		<s:HGroup>
			<s:Label text="布局" height="100%" verticalAlign="middle" width="60"/>
			<s:ComboBox id="ControlLayout" selectedIndex="{BindTabContentLayout}" change="LayoutChange(event)" width="80" >
				<s:ArrayCollection>
					<fx:String>绝对布局</fx:String>
					<fx:String>横向布局</fx:String>
					<fx:String>纵向布局</fx:String>
				</s:ArrayCollection>
			</s:ComboBox>
		</s:HGroup>
		
		<ui:BordeStyleProperty id="BorderStyle" Control="{CurrentControl}" />
		<ui:Background id="BackgroundStyle" Control="{CurrentControl}"/>
		<ui:ScaleProperty id="ScaleStyle" Control="{CurrentControl}"/>
		
	</s:VGroup>
</ui:GenericProperty>
